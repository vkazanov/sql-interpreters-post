* DONE [10/10] Algebra
** DONE Read table from memory
** DONE Table scan operator
** DONE Projection operator
** DONE Union operator
** DONE Join operator
** DONE Selection operator
** DONE Sort operator
** DONE value_pos -> attr_i
** DONE Separate relation tuple adding/loading and relation metadata definition
** DONE Valgrind the hell out of it
* DONE [8/8] SQL Parser
** DONE scanner
** DONE prefix scanner-related function (or separate into a different module?)
** DONE SELECT - select x from y
** DONE SELECT - where
** DONE SELECT - order by asc/desc
** DONE CREATE TABLE
** DONE INSERT INTO
** DONE Error handling
* DONE [17/17] Query Evaluator
** DONE CLI util with just a parser attached
** DONE query parse dumper
** DONE catalogue
** DONE create table (validate)
** DONE insert (validate)
** DONE create table (eval)
** DONE insert (eval)
** DONE select (validate)
** DONE catalogue as an arg
** DONE validation tests (select/create/insert)
** DONE select (compile/eval) - scan/join
** DONE select (compile/eval) - project
** DONE select (compile/eval) - select
** DONE select (compile/eval) - sort
** DONE attr name type not used?
** DONE destroy the op tree
** DONE Code comments
* TODO [3/7] The Article
** DONE basic text
** DONE links to papers
** DONE mar new terminology with italics
** TODO rework the structure

   Я, кстати, по поводу Volcano, кажется, не знал ранее. Так что от статьи уже польза есть, спасибо
   :) А вот реализацию на Си, мне кажется, нужно бы лучше "прорекламировать" для читателя :)

   Если объем ограничен, то я бы ради практики и объяснений "на пальцах" пожертвовал историческим
   разделом (кроме Volcano, разумеется).

   Очень интересно! Но в текущем варианте изложение ведется очень уж сжато, тезисно. По части кода
   хотелось бы вести читателя от совсем игрушечной версии (где, например, еще парсера нет и не все
   операции поддерживаются) к завершенной. И любопытно бы получить какие-то результаты в конце.

   Сравнить с sqlite, например. Более четко определить, на что делается упор: компактность-простота
   реализации, улучшенные характеристики для своей ниши и так далее. В целом, *объяснить читателю,
   зачем может быть необходимо создавать* свой движок БД.

   Я не ради буквоедства — в целом было бы неплохо показать, мол, тут у нас просто еще один компилятор.
   Как компиляторы делаются, мы знаем. Вот как в эту схему укладывается PigletQL. Я уверен, что у
   специалистов по БД свои подходы и терминология, и тут *переход на общепринятый компиляторный язык*
   что-то мог бы упростить :)

   Кстати, имело бы смысл использовать терминологию, привычную компиляторщикам: AST, трансляция,
   алгебраические преобразования... Кстати, эти pull/push-based — то же самое, что вычисления
   by-value/by-need?

   Я уже покритиковать успел. Повторюсь: материал хороший, но самая *интересная компиляторная часть
   осталась в коде*, о ней пока в тексте нет, при этом надо читателя более плавно подвести к своему
   уровню :)

** TODO translate all the comments, mention C
** TODO links to the repo
** TODO proper biblio
** TODO illustrations
** TODO repo comments
